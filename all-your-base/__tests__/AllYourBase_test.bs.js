// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var AllYourBase$AllYourBase = require("../src/AllYourBase.bs.js");

describe("all-your-base", (function () {
        Jest.test("single bit one to decimal", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              1,
                              /* [] */0
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* :: */[
                                    1,
                                    /* [] */0
                                  ], 100)));
              }));
        Jest.test("binary to single decimal", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              5,
                              /* [] */0
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* :: */[
                                    1,
                                    /* :: */[
                                      0,
                                      /* :: */[
                                        1,
                                        /* [] */0
                                      ]
                                    ]
                                  ], 10)));
              }));
        Jest.test("single decimal to binary", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              1,
                              /* :: */[
                                0,
                                /* :: */[
                                  1,
                                  /* [] */0
                                ]
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    5,
                                    /* [] */0
                                  ], 2)));
              }));
        Jest.test("binary to multiple decimal", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              4,
                              /* :: */[
                                2,
                                /* [] */0
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* :: */[
                                    1,
                                    /* :: */[
                                      0,
                                      /* :: */[
                                        1,
                                        /* :: */[
                                          0,
                                          /* :: */[
                                            1,
                                            /* :: */[
                                              0,
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ], 10)));
              }));
        Jest.test("decimal to binary", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              1,
                              /* :: */[
                                0,
                                /* :: */[
                                  1,
                                  /* :: */[
                                    0,
                                    /* :: */[
                                      1,
                                      /* :: */[
                                        0,
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    4,
                                    /* :: */[
                                      2,
                                      /* [] */0
                                    ]
                                  ], 2)));
              }));
        Jest.test("trinary to hexadecimal", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              2,
                              /* :: */[
                                10,
                                /* [] */0
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(3, /* :: */[
                                    1,
                                    /* :: */[
                                      1,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          0,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ], 16)));
              }));
        Jest.test("hexadecimal to trinary", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              1,
                              /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    0,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(16, /* :: */[
                                    2,
                                    /* :: */[
                                      10,
                                      /* [] */0
                                    ]
                                  ], 3)));
              }));
        Jest.test("15-bit integer", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              6,
                              /* :: */[
                                10,
                                /* :: */[
                                  45,
                                  /* [] */0
                                ]
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(97, /* :: */[
                                    3,
                                    /* :: */[
                                      46,
                                      /* :: */[
                                        60,
                                        /* [] */0
                                      ]
                                    ]
                                  ], 73)));
              }));
        Jest.test("empty list", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* [] */0, 10)));
              }));
        Jest.test("single zero", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    0,
                                    /* [] */0
                                  ], 2)));
              }));
        Jest.test("multiple zeros", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    0,
                                    /* :: */[
                                      0,
                                      /* :: */[
                                        0,
                                        /* [] */0
                                      ]
                                    ]
                                  ], 2)));
              }));
        Jest.test("leading zeros", (function () {
                return Jest.Expect[/* toEqual */12](/* Some */[/* :: */[
                              4,
                              /* :: */[
                                2,
                                /* [] */0
                              ]
                            ]], Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(7, /* :: */[
                                    0,
                                    /* :: */[
                                      6,
                                      /* :: */[
                                        0,
                                        /* [] */0
                                      ]
                                    ]
                                  ], 10)));
              }));
        Jest.test("first base is zero", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(0, /* [] */0, 10)));
              }));
        Jest.test("first base is negative", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(-1, /* [] */0, 10)));
              }));
        Jest.test("negative digit", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* :: */[
                                    1,
                                    /* :: */[
                                      -1,
                                      /* :: */[
                                        1,
                                        /* :: */[
                                          0,
                                          /* :: */[
                                            1,
                                            /* :: */[
                                              0,
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ], 10)));
              }));
        Jest.test("invalid positive digit", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(2, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        1,
                                        /* :: */[
                                          0,
                                          /* :: */[
                                            1,
                                            /* :: */[
                                              0,
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ], 10)));
              }));
        Jest.test("second base is one", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* [] */0, 1)));
              }));
        Jest.test("second base is zero", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    1,
                                    /* [] */0
                                  ], 0)));
              }));
        Jest.test("second base is negative", (function () {
                return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(10, /* :: */[
                                    1,
                                    /* [] */0
                                  ], -1)));
              }));
        return Jest.test("both bases are negative", (function () {
                      return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](AllYourBase$AllYourBase.rebase(-1, /* :: */[
                                          1,
                                          /* [] */0
                                        ], -1)));
                    }));
      }));

/*  Not a pure module */
