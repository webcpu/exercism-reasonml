// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function toCondons(xs) {
  var match = xs.length;
  if (match !== 0) {
    return List.append(/* :: */[
                $$String.sub(xs, 0, 3),
                /* [] */0
              ], toCondons($$String.sub(xs, 3, xs.length - 3 | 0)));
  } else {
    return /* [] */0;
  }
}

function condonToProteins(c) {
  switch (c) {
    case "AUG" : 
        return /* :: */[
                "Methionine",
                /* [] */0
              ];
    case "UAC" : 
    case "UAU" : 
        return /* :: */[
                "Tyrosine",
                /* [] */0
              ];
    case "UCA" : 
    case "UCC" : 
    case "UCG" : 
    case "UCU" : 
        return /* :: */[
                "Serine",
                /* [] */0
              ];
    case "UAA" : 
    case "UAG" : 
    case "UGA" : 
        return /* [] */0;
    case "UGG" : 
        return /* :: */[
                "Tryptophan",
                /* [] */0
              ];
    case "UGC" : 
    case "UGU" : 
        return /* :: */[
                "Cysteine",
                /* [] */0
              ];
    case "UUA" : 
    case "UUG" : 
        return /* :: */[
                "Leucine",
                /* [] */0
              ];
    case "UUC" : 
    case "UUU" : 
        return /* :: */[
                "Phenylalanine",
                /* [] */0
              ];
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "ProteinTranslation.re",
              11,
              2
            ]
          ];
  }
}

function condonsToProteins(cs) {
  if (cs) {
    var x = cs[0];
    var xs = cs[1];
    var ps = condonToProteins(x);
    var match = ps === /* [] */0;
    if (match) {
      return /* [] */0;
    } else {
      return List.append(ps, condonsToProteins(xs));
    }
  } else {
    return /* [] */0;
  }
}

function proteins(xs) {
  return condonsToProteins(toCondons(xs));
}

exports.proteins = proteins;
/* No side effect */
