// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var RunLengthEncoding$RunLengthEncoding = require("../src/RunLengthEncoding.bs.js");

describe("encode function", (function () {
        Jest.test("empty string", (function () {
                return Jest.Expect[/* toBe */2]("", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("")));
              }));
        Jest.test("single characters only are encoded without count", (function () {
                return Jest.Expect[/* toBe */2]("XYZ", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("XYZ")));
              }));
        Jest.test("string with no single characters", (function () {
                return Jest.Expect[/* toBe */2]("2A3B4C", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("AABBBCCCC")));
              }));
        Jest.test("single characters mixed with repeated characters", (function () {
                return Jest.Expect[/* toBe */2]("12WB12W3B24WB", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB")));
              }));
        Jest.test("multiple whitespace mixed in string", (function () {
                return Jest.Expect[/* toBe */2]("2 hs2q q2w2 ", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("  hsqq qww  ")));
              }));
        return Jest.test("lowercase characters", (function () {
                      return Jest.Expect[/* toBe */2]("2a3b4c", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.encode("aabbbcccc")));
                    }));
      }));

describe("decode function", (function () {
        Jest.test("empty string", (function () {
                return Jest.Expect[/* toBe */2]("", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("")));
              }));
        Jest.test("single characters only", (function () {
                return Jest.Expect[/* toBe */2]("XYZ", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("XYZ")));
              }));
        Jest.test("string with no single characters", (function () {
                return Jest.Expect[/* toBe */2]("AABBBCCCC", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("2A3B4C")));
              }));
        Jest.test("single characters with repeated characters", (function () {
                return Jest.Expect[/* toBe */2]("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("12WB12W3B24WB")));
              }));
        Jest.test("multiple whitespace mixed in string", (function () {
                return Jest.Expect[/* toBe */2]("  hsqq qww  ", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("2 hs2q q2w2 ")));
              }));
        return Jest.test("lower case string", (function () {
                      return Jest.Expect[/* toBe */2]("aabbbcccc", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode("2a3b4c")));
                    }));
      }));

describe("Encode/decode are inverse operations", (function () {
        return Jest.test("encode(followed by decode gives original string", (function () {
                      return Jest.Expect[/* toBe */2]("zzz ZZ  zZ", Jest.Expect[/* expect */0](RunLengthEncoding$RunLengthEncoding.decode(RunLengthEncoding$RunLengthEncoding.encode("zzz ZZ  zZ"))));
                    }));
      }));

/*  Not a pure module */
