// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function encode(xs) {
  if (xs === "") {
    return "";
  } else {
    var xs$1 = xs;
    var result = xs$1.split("").reduce((function (b, a, i) {
            var ns = b[1];
            var cs = b[0];
            var len = cs.length;
            var lastIndex = cs.length - 1 | 0;
            var match = i === 0;
            var cs$prime;
            if (match) {
              cs$prime = /* array */[a];
            } else {
              var match$1 = a === Caml_array.caml_array_get(cs, lastIndex);
              cs$prime = match$1 ? cs : $$Array.append(cs, /* array */[a]);
            }
            var match$2 = i === 0;
            var ns$prime;
            if (match$2) {
              ns$prime = /* array */[1];
            } else {
              var match$3 = a === Caml_array.caml_array_get(cs, lastIndex);
              ns$prime = match$3 ? $$Array.append($$Array.sub(ns, 0, len - 1 | 0), /* array */[Caml_array.caml_array_get(ns, lastIndex) + 1 | 0]) : $$Array.append(ns, /* array */[1]);
            }
            return /* tuple */[
                    cs$prime,
                    ns$prime
                  ];
          }), /* tuple */[
          /* array */[],
          /* array */[]
        ]);
    var cs = result[0];
    return result[1].map((function (n, i) {
                    var match = n > 1;
                    if (match) {
                      return String(n) + Caml_array.caml_array_get(cs, i);
                    } else {
                      return Caml_array.caml_array_get(cs, i);
                    }
                  })).join("");
  }
}

function _decode(xs) {
  var takeDigits = function (s) {
    if (s === "") {
      return "";
    } else {
      var match = "0123456789".includes($$String.sub(s, 0, 1));
      if (match) {
        return $$String.sub(s, 0, 1) + takeDigits($$String.sub(s, 1, s.length - 1 | 0));
      } else {
        return "";
      }
    }
  };
  var takeLetter = function (s) {
    if (s === "") {
      return "";
    } else {
      return $$String.sub(s, 0, 1);
    }
  };
  var next = function (xs) {
    var digits = takeDigits(xs);
    var match = digits === "";
    var offset = match ? 1 : digits.length + 1 | 0;
    return $$String.sub(xs, offset, xs.length - offset | 0);
  };
  var decodeNumberLetter = function (xs) {
    var getNumberOfLetter = function (xs) {
      var digits = takeDigits(xs);
      var match = digits === "";
      if (match) {
        return 1;
      } else {
        return Caml_format.caml_int_of_string(digits);
      }
    };
    var getLetter = function (xs) {
      var digits = takeDigits(xs);
      var letter = takeLetter($$String.sub(xs, digits.length, xs.length - digits.length | 0));
      return Caml_string.get(letter, 0);
    };
    var n = getNumberOfLetter(xs);
    var c = getLetter(xs);
    return $$String.make(n, c);
  };
  if (xs === "") {
    return "";
  } else {
    var result = decodeNumberLetter(xs);
    var nextString = next(xs);
    return result + _decode(nextString);
  }
}

function decode(xs) {
  if (xs === "") {
    return "";
  } else {
    return _decode(xs);
  }
}

exports.encode = encode;
exports.decode = decode;
/* No side effect */
