// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function wordCount(s) {
  var trimPunctuations = function (xs) {
    var alphanum = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var rest = function (xs) {
      var n = xs.length;
      if (n !== 1) {
        return $$String.sub(xs, 1, n - 1 | 0);
      } else {
        return "";
      }
    };
    var most = function (xs) {
      var match = xs.length === 1;
      if (match) {
        return "";
      } else {
        return $$String.sub(xs, 0, xs.length - 1 | 0);
      }
    };
    var last = function (xs) {
      return Caml_string.get(xs, xs.length - 1 | 0);
    };
    var ltrim = function (_xs) {
      while(true) {
        var xs = _xs;
        var match = xs.length === 0;
        if (match) {
          return "";
        } else {
          var x = Caml_string.get(xs, 0);
          var match$1 = $$String.contains(alphanum, x);
          if (match$1) {
            return xs;
          } else {
            _xs = rest(xs);
            continue ;
          }
        }
      };
    };
    var _xs = ltrim(xs);
    while(true) {
      var xs$1 = _xs;
      var match = xs$1.length === 0;
      if (match) {
        return "";
      } else {
        var x = last(xs$1);
        var match$1 = $$String.contains(alphanum, x);
        if (match$1) {
          return xs$1;
        } else {
          _xs = most(xs$1);
          continue ;
        }
      }
    };
  };
  var countWord = function (dict, k) {
    var v = dict[k];
    if (v !== undefined) {
      dict[k] = v + 1 | 0;
    } else {
      dict[k] = 1;
    }
    return dict;
  };
  return $$Array.map((function (prim) {
                  return prim.toLowerCase();
                }), $$Array.map(trimPunctuations, s.split((/\s+/)).map((function (prim) {
                            return prim.trim();
                          })).filter((function (x) {
                          return x.length > 0;
                        })))).reduce(countWord, { });
}

exports.wordCount = wordCount;
/* No side effect */
